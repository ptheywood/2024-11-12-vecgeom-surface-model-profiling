---
title: "VecGeom `surface_model` profiling"
author: 
  - "Peter Heywood, Research Software Engineer"
institute: 
  - "The University of Sheffield"
date: "2024-11-12"
logo: ./img/UOSLogo_Primary_Violet_RGB.svg
footer: "VecGeom `surface_model` profiling - [SWIFT-HEP #8 Joint with ExaTEPP](https://indico.cern.ch/event/1466097/)"

format:
  revealjs:
    theme: theme/tuos.scss
    embed-resources: true  # only enable when publish-ready for perf reasons
    template-partials: 
      - title-slide.html
    # show-notes: separate-page
    slide-number: c
    width: 1050
    height: 700
    margin: 0.1
    min-scale: 0.2
    max-scale: 2.0
    auto-stretch: false
    fontsize: 32px
    navigation-mode: linear
    controls: true
    mouse-wheel: true

# title slide background
title-slide-attributes:
  data-background-color: "#9ADBE8" # $tuos-powder-blue
  # data-background-color: "#D7F1F6" # $tuos-powder-blue-40

---

# Intro/Context {.divider .teal}

<!-- Only 20 mins. -->

## VecGeom `surface_model`

> VecGeom is a geometry modeller library with hit-detection features as needed by particle detector simulation at the LHC and beyond

+ [gitlab.cern.ch/VecGeom/VecGeom](https://gitlab.cern.ch/VecGeom/VecGeom)
+ CPU + GPU
+ Solid modelling / representation is not ideal for GPU
+ Developers are adding a Surface modelling / representation
  + [`surface_model` branch](https://gitlab.cern.ch/VecGeom/VecGeom/-/tree/surface_model) 
    + Similarities with [Orange](https://celeritas-project.github.io/celeritas/user/implementation/orange.html)/[Celeritas](https://github.com/celeritas-project/celeritas)

## `testRaytracing`

+ `test/surfaces/testRaytracing.{h/cpp/cu}`
+ Loads Geometry, generates random rays, tests on CPU and GPU.
  + Solid and Surface representation
  + Validation (optional)
  + Without/with BVH
  + GPU Surface BVH with multiple kernel launches & split kernels



+ Profiling tweaks:
  + [NVTX](https://nvidia.github.io/NVTX/) ranges for profile annotation
  + `-oncpu 0` to disable cpu runs to to speed up profiling

```{.bash .bigger}
testRaytracing -gdml_name file.gdml -ongpu 1 -mmunit 0.1 -verbosity 0 \
    -accept_zeros 1 -validate_results 1 -nrays 524228 -use_TB_gun 0   \
    -only_surf 0 -test_bvh 1 -bvh_single_step 1 -bvh_split_step 1     \
    -oncpu 1
```

## `testRaytracing` timeline (`nsys`) {.smalltitle}

![](img/image.png){fig-alt="alt text" width="100%" height="100%"}

<!-- @todo Annotated testRaytracing timeline showing the relevant bits? -->

```bash
testRaytracing -gdml_name file.gdml -ongpu 1 -mmunit 0.1 -verbosity 0     \
    -accept_zeros 1 -validate_results 1 -nrays 524228 -use_TB_gun 0       \
    -only_surf 0 -test_bvh 1 -bvh_single_step 1 -bvh_split_step 1 -oncpu 1
```

## `testRaytracing` timeline (`nsys`) {.smalltitle}

![](img/image.png){fig-alt="alt text" width="100%" height="100%"}

<!-- @todo simplified version -->

```bash
testRaytracing -gdml_name file.gdml -ongpu 1 -mmunit 0.1 -verbosity 0      \
    -accept_zeros 1 -validate_results 0 -nrays 524228  -use_TB_gun 0       \
    -only_surf 1 -test_bvh 1 -bvh_single_step 1 -bvh_split_step 1 -oncpu 0
```

## Hardware & Geometries

::: {.center layout="[[1], [-1], [1]]"}

| GPU       | CC | CPU                  | Cluster                             | Driver       |
|:----------|----|:---------------------|:------------------------------------|:-------------|
| V100 SXM2 | 70 | Intel Xeon Gold 6138 | [TUoS Bessemer][bessemer-gpu-specs] | `550.127.05` |
| A100 SXM4 | 80 | AMD EPYC 7413        | [TUoS Stanage][stanage-gpu-specs]   | `550.127.05` |
| H100 PCIe | 90 | AMD EPYC 7413        | [TUoS Stanage][stanage-gpu-specs]   | `550.127.05` |
| GH200     | 90 | Nvidia Grace         | [N8CIR Bede][bede-gpu-specs]        | `560.35.03`  |

: {.striped .table-full-width}

| Geometry                                                                 | Touchables |
|:-------------------------------------------------------------------------|-----------:|
| [`trackML.gdml`][trackML.gdml]                                           |    `18790` |
| [`TBHGCal181Oct_fixdup.gdml`][TBHGCal181Oct_fixdup.gdml]                 |    `61802` |
| [`cms2026D110DD4hep_fix.gdml`][cms2026D110DD4hep_fix.gdml]               | `13133900` |
| [`LHCb_Upgrade_onlyECALandHCAL.gdml`][LHCb_Upgrade_onlyECALandHCAL.gdml] | `18429884` |

: {.striped .table-full-width}

:::


## Benchmarking

@todo - maybe old benchmark plot, showing CPU and GPU?

# Profiling {.divider .teal}

## `PropagateRaysSurf` & `PropagateRaysSurfBVH`

@todo - benchmark data for propagateRaysSurf/PropagateRaysSurfBVH

## Occupancy, Registers & Memory (stalls?)

@todo - ncu screenshot showing registers per thread / occupancy

## Streaming Multiprocessor, Residency, Occupancy, Registers file

+ Nvidia GPUs contain many (GH100 has `144`) Streaming Multiprocessors (SMs). 
+ @todo nv SM diagram? https://resources.nvidia.com/en-us-tensor-core/gtc22-whitepaper-hopper
+ Each SM has a fixed number of 32 bit registers per SM (64K 32-bit registers for Hopper)
+ Each thread has a upper limit of 255 registers / thread
+ The required number of register per thread limits the number of threads which can become resident within an SM

+ **Occupancy** Ratio of active warps on an SM to the maximum it could support
+ Increasing occupancy does not guarantee improved performance
+ But it can enable the *warp scheduler* to context switch to other threads within the block, *hiding latency* 

+ *resident threads* have been loaded into an SM
+ *active threads of a warp* are participating in the current instruction
+ *disabled threads of a warp* are not participating in the current instruction
+ achieved occupancy will be lower than theoretical occupancy, especially when the schedulers cannot balance the work. 
+ *eligable warps* are ready to isseu their next instruction (instruction has been fetched, execution unit(s) for instruction area ready, no unmet dependencies)
+ *stalled warps* are not ready.
+ Ideally want atleas as many eligable warps as schdulers per SM at any one point.
+ 2 warps per SM is not enough... 
<!-- https://docs.nvidia.com/gameworks/content/developertools/desktop/analysis/report/cudaexperiments/kernellevel/issueefficiency.htm -->
+ If the kernel requires more than 255 registers per thread, registers will spill to *local memory*
+ *local memory* is a (terribly named) region of *global memory* (with L1 caching of stores) - i.e. it is outside of the SM so latency is bad.

## `PropagateRaysSurfBVHSingle` 

+ Split the single kernel launch into a loop of 2 kernels:
  + `PropagateRaysSurfBVHSingle` - traverse a single step
  + `filterAliveRays` - compact the alive/inside rays for the next iteration
+ Reduces register pressure

+ @todo - timeline screen shot
+ @todo - compare for a single model? 
+ @todo - Only able to get partial data so far
+ @todo - show register use,  runtime.

## `ComputeNextStepAndNextSurfaces` + `RelocateToNextVolumes` 

+ Splits  `PropagateRaysSurfBVHSingle` into `ComputeStepAndNextSurfaces` & `RelocateToNextVolumes`
+ @todo - timeline screenshot + comparison for the same geometry
+ @todo - show register usage + total time.
+ @todo - benchmark plot? 

## Mixed Precision Mode

::::: {layout="[[1], [-1], [1]]"}

:::: {.columns}

::: {.column .smaller width="60%"}

<!-- + Reduce register pressure by using single precision in for some but not all real values -->
+ Single precision for some but not all `Real`
+ Reduces register pressure
+ More FP32 units
+ Less memory

:::

::: {.column width="40%"}

```{.cpp .bigger style="margin-top: 0px; overflow: hidden;"}
// testRaytracing.h
using Real_t = float;
```

:::

::::


:::: {.columns}

::: {.column .smaller width="60%"}

+ *"not stable on most geometries"*
  + Assertions triggered by many geometries
  + Launch failures
  + `bvh_single_step` and `bvh_split_step` run indefinitely
    + For some geometries, and on some GPUs?
  + Unintentionally created a 1.3TB log file...

:::

::: {.column width="40%"}

```{.console .bigger style="margin-top: 285px"}
$ du -sh slurm-842405.out
1.3T    slurm-842405.out
```

:::

::::

:::::

## Impact of Mixed Precision

+ Less data to read, move and store
+ More FP32 units
+ Reduces Register pressure
  + @todo - number.

+ @todo - change in runtime not significant for the base kernel

# Benchmarking {.divider .teal}

## Per Model or Per kernel?

@todo decide

## TrackML

## LHcb Update

## CMS2026

## HGCal

@todo

# Thank you {.divider .flamingo}

# Additional Slides {.divider .coral visibility="uncounted" data-hide-slide-number='true'}

## CMake Configuration

```bash
cmake -S . -B build \ 
      -DCMAKE_BUILD_TYPE=Release \
      -DCMAKE_CUDA_ARCHITECTURES="70;80;90" \
      -DVECGEOM_ENABLE_CUDA=ON -DVECGEOM_GDML=ON \
      -DBACKEND=Scalar -DVECGEOM_USE_NAVTUPLE=ON \
      -DVECGEOM_BVH_SINGLE=ON -DVECGEOM_BUILTIN_VECCORE=ON
```

## Hardware 

::: {.center layout="[[-1], [1], [-1]]"}

| GPU       | CC | CPU                  | Cluster                             | Driver       |
|:----------|----|:---------------------|:------------------------------------|:-------------|
| V100 SXM2 | 70 | Intel Xeon Gold 6138 | [TUoS Bessemer][bessemer-gpu-specs] | `550.127.05` |
| A100 SXM4 | 80 | AMD EPYC 7413        | [TUoS Stanage][stanage-gpu-specs]   | `550.127.05` |
| H100 PCIe | 90 | AMD EPYC 7413        | [TUoS Stanage][stanage-gpu-specs]   | `550.127.05` |
| GH200     | 90 | Nvidia Grace         | [N8CIR Bede][bede-gpu-specs]        | `560.35.03`  |

: {.striped .table-full-width}

:::


## Geometries

::: {.center layout="[[-1], [1], [-1]]"}

| Geometry                                                                 | Touchables |
|:-------------------------------------------------------------------------|-----------:|
| [`trackML.gdml`][trackML.gdml]                                           |    `18790` |
| [`TBHGCal181Oct_fixdup.gdml`][TBHGCal181Oct_fixdup.gdml]                 |    `61802` |
| [`cms2026D110DD4hep_fix.gdml`][cms2026D110DD4hep_fix.gdml]               | `13133900` |
| [`LHCb_Upgrade_onlyECALandHCAL.gdml`][LHCb_Upgrade_onlyECALandHCAL.gdml] | `18429884` |

: {.striped .table-full-width}

:::

## Limit registers per thread

+ Use `--ptxas-options=-v` to get register use and spill count at compile time
  + Or it is reported by the profiler(s).
+ Globally via `--maxrregcount N`
+ Per kernel:
  + `__maxnreg__` for CUDA >= 12.4
  + `__launch_bounds__` for older CUDAs, but less intuitive

+ I.e. `cmake .. -DCMAKE_CUDA_FLAGS="--maxrregcount 128 -Xptxas -v" ... `

+ Increases occupancy
+ Increases (forces) register spilling
+ Often hurts more than it helps

+ @todo -figures and dat if possible.


## Increase block size. 

* In `testRaytracing.cu`, this is a constexpr int for all kernels, which can be modified.

```{.cpp}
// testRaytracing.cu
  constexpr int initThreads = 32;
  int initBlocks            = (nrays + initThreads - 1) / initThreads;
```

* Alternatively, could use a per-kernel occupancy API method to maximise occupancy, i.e. `cudaOccupancyMaxPotentialBlockSize`
  * Specialises for the target GPU architecture.
  * Note: if kernel is overloaded, must specify the correct function ptr

```{.cpp}
  int minGridSize = 0;
  int blockSize = 0;
  int gridSize = 0;
  // ...
  cudaOccupancyMaxPotentialBlockSize(&minGridSize, &blockSize, PropagateRaysSurfBVH);
  gridSize = (nrays + blockSize - 1) / blockSize;
  PropagateRaysSurfBVH<<<gridSize, blockSize>>>(nrays, ...);
```




## Long Tail

- Slide showing the long tail?



<!-- 
# Templates {.divider .flamingo visibility="uncounted" data-hide-slide-number='true'}


::: {.plug}

Sample plug 

[https://github.com/ptheywood](https://github.com/ptheywood)

:::


## Screnshot slide {.smalltitle}

![](img/image.png){fig-alt="alt text" width="100%" height="100%"}

## columns 


:::: {.columns}

::: {.column width="50%"}

+ column
+ one

```{.bash}
#! /usr/bin/env bash
echo "regular"
```

:::

::: {.column width="50%"}

+ column
+ two

```{.bash .bigger}
#! /usr/bin/env bash
echo "bigger"
```

:::

:::: -->

<!-- Reference links -->
[bessemer-gpu-specs]: https://docs.hpc.shef.ac.uk/en/latest/bessemer/cluster_specs.html#gpu-node-specifications
[stanage-gpu-specs]: https://docs.hpc.shef.ac.uk/en/latest/stanage/cluster_specs.html#gpu-nodes
[bede-gpu-specs]: https://bede-documentation.readthedocs.io/en/latest/hardware/index.html
[trackML.gdml]: https://gitlab.cern.ch/VecGeom/VecGeom/-/blob/master/test/gdml/gdmls/trackML.gdml?ref_type=heads
[TBHGCal181Oct_fixdup.gdml]: https://cern-my.sharepoint.com/:u:/g/personal/severin_diederichs_cern_ch/EWFFpWCW4GpOhJgQfBaZTVkBjsjHke93QO7Em3TrK_GkFg
[cms2026D110DD4hep_fix.gdml]: https://cern-my.sharepoint.com/:u:/g/personal/severin_diederichs_cern_ch/EfTefx_Me71Gs37_h-nuaTQB_8lqNsCMSz9kNmQOpEl2sA
[LHCb_Upgrade_onlyECALandHCAL.gdml]: https://cern-my.sharepoint.com/:u:/g/personal/severin_diederichs_cern_ch/EWdDg95YWNNOuznQ9DnrfMUBmQrT9Akp2ixUPBuhGIdQww